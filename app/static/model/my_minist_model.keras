{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"KNPLiKUfGeIf"},"outputs":[],"source":["import numpy as np\n","from tensorflow import keras\n","from tensorflow.keras import layers"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1740,"status":"ok","timestamp":1696113004536,"user":{"displayName":"DragonKing","userId":"03190416174889975634"},"user_tz":300},"id":"QzW02D6rInPZ","outputId":"d6b366b3-00f6-472b-bf1e-f25975363189"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11490434/11490434 [==============================] - 0s 0us/step\n","x_train shape: (60000, 28, 28, 1)\n","60000 train samples\n","10000 test samples\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 26, 26, 32)        320       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 13, 13, 32)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 11, 11, 64)        18496     \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 5, 5, 64)         0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 1600)              0         \n","                                                                 \n"," dropout (Dropout)           (None, 1600)              0         \n","                                                                 \n"," dense (Dense)               (None, 10)                16010     \n","                                                                 \n","=================================================================\n","Total params: 34,826\n","Trainable params: 34,826\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["num_classes = 10\n","input_shape = (28, 28, 1)\n","\n","(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()\n","\n","x_train = x_train.astype(\"float32\")/255\n","x_test = x_test.astype(\"float32\")/255\n","\n","x_train = np.expand_dims(x_train, -1)\n","x_test = np.expand_dims(x_test, -1)\n","print(\"x_train shape:\", x_train.shape)\n","print(x_train.shape[0], \"train samples\")\n","print(x_test.shape[0], \"test samples\")\n","\n","y_train = keras.utils.to_categorical(y_train, num_classes)\n","y_test = keras.utils.to_categorical(y_test, num_classes)\n","\n","\n","\n","model = keras.Sequential(\n","    [\n","        keras.Input(shape=input_shape),\n","        layers.Conv2D(32, kernel_size=(3,3), activation=\"relu\"),\n","        layers.MaxPooling2D(pool_size=(2,2)),\n","        layers.Conv2D(64, kernel_size=(3,3), activation=\"relu\"),\n","        layers.MaxPooling2D(pool_size=(2,2)),\n","        layers.Flatten(),\n","        layers.Dropout(0.5),\n","        layers.Dense(num_classes, activation=\"softmax\"),\n","    ]\n",")\n","\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":425},"executionInfo":{"elapsed":94672,"status":"error","timestamp":1696113114377,"user":{"displayName":"DragonKing","userId":"03190416174889975634"},"user_tz":300},"id":"QxLg3kv1KQ0F","outputId":"ac117bc3-3c44-450f-bf83-08ae21b7c9aa"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/12\n","422/422 [==============================] - 40s 91ms/step - loss: 0.3570 - accuracy: 0.8929 - val_loss: 0.0813 - val_accuracy: 0.9770\n","Epoch 2/12\n","422/422 [==============================] - 39s 93ms/step - loss: 0.1142 - accuracy: 0.9648 - val_loss: 0.0580 - val_accuracy: 0.9840\n","Epoch 3/12\n","422/422 [==============================] - 39s 92ms/step - loss: 0.0864 - accuracy: 0.9730 - val_loss: 0.0519 - val_accuracy: 0.9868\n","Epoch 4/12\n","422/422 [==============================] - 38s 90ms/step - loss: 0.0723 - accuracy: 0.9776 - val_loss: 0.0426 - val_accuracy: 0.9897\n","Epoch 5/12\n","422/422 [==============================] - 38s 91ms/step - loss: 0.0637 - accuracy: 0.9801 - val_loss: 0.0405 - val_accuracy: 0.9893\n","Epoch 6/12\n","422/422 [==============================] - 36s 86ms/step - loss: 0.0576 - accuracy: 0.9815 - val_loss: 0.0371 - val_accuracy: 0.9895\n","Epoch 7/12\n","422/422 [==============================] - 36s 86ms/step - loss: 0.0531 - accuracy: 0.9834 - val_loss: 0.0345 - val_accuracy: 0.9900\n","Epoch 8/12\n","422/422 [==============================] - 36s 86ms/step - loss: 0.0488 - accuracy: 0.9851 - val_loss: 0.0334 - val_accuracy: 0.9908\n","Epoch 9/12\n","422/422 [==============================] - 37s 87ms/step - loss: 0.0439 - accuracy: 0.9861 - val_loss: 0.0318 - val_accuracy: 0.9918\n","Epoch 10/12\n","422/422 [==============================] - 37s 87ms/step - loss: 0.0429 - accuracy: 0.9860 - val_loss: 0.0330 - val_accuracy: 0.9910\n","Epoch 11/12\n","422/422 [==============================] - 35s 84ms/step - loss: 0.0389 - accuracy: 0.9872 - val_loss: 0.0291 - val_accuracy: 0.9923\n","Epoch 12/12\n","422/422 [==============================] - 35s 83ms/step - loss: 0.0369 - accuracy: 0.9885 - val_loss: 0.0269 - val_accuracy: 0.9925\n"]},{"data":{"text/plain":["<keras.src.callbacks.History at 0x7ede9c156830>"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["batch_size = 128\n","epochs = 12\n","\n","model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n","\n","model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, validation_split=0.1)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1165,"status":"ok","timestamp":1695509189373,"user":{"displayName":"DragonKing","userId":"03190416174889975634"},"user_tz":300},"id":"rYAbMYB2NyTW","outputId":"f5c08045-80bc-4e0c-f7a4-8f642ea679ec"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5330,"status":"ok","timestamp":1696113624825,"user":{"displayName":"DragonKing","userId":"03190416174889975634"},"user_tz":300},"id":"CPOwAM6fOg8N","outputId":"ce2d0493-9561-4427-a941-a7a8b1427b50"},"outputs":[{"output_type":"stream","name":"stdout","text":["Test loss 0.07212185114622116\n","Test accuracy: 0.9779000282287598\n"]}],"source":["score = model.evaluate(x_test, y_test, verbose=0)\n","print(\"Test loss\", score[0])\n","print(\"Test accuracy:\", score[1])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OSSiOSaiOWAc"},"outputs":[],"source":["from tensorflow.keras.models import load_model\n","model.save('/content/drive/MyDrive/my_minist_model.keras')"]}],"metadata":{"accelerator":"TPU","colab":{"provenance":[],"authorship_tag":"ABX9TyOACQ5aNvLsurqvECgmjfFT"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}